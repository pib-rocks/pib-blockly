import {Block} from "blockly/core/block";
import {Order, pythonGenerator} from "blockly/python";
import {
    CONFIGURE_LOGGING,
    IMPORT_APPLY_JOINT_TRAJECTORY,
    IMPORT_JOINT_TRAJECTORY_MESSAGES,
    IMPORT_LOGGING,
    IMPORT_RCLPY,
    IMPORT_SYS,
    INIT_APPLY_JOINT_TRASJECTORY_CLIENT,
    INIT_MOTORNAME_TO_POSITION,
    INIT_ROS,
} from "./util/definitions";
import {motors} from "src/app/shared/types/motor-configuration";
import {APPLY_JOINT_TRAJECTORY_FUNCTION} from "./util/function-declarations";

const motorOptionToMotorName = new Map();
for (const {motorName} of motors) {
    motorOptionToMotorName.set(motorName.toUpperCase(), motorName);
}
// code must also be able to be generated by an llm
// for the llm to be able to generate correct code, the motor
// names must be sufficiently descriptive
// e.g. 'tilt_forward_motor' does not indicate, which
// body part is tilt forward
// -> name must be adapted to be more descriptive
motorOptionToMotorName.delete("TILT_FORWARD_HEAD");
motorOptionToMotorName.set("TILT_FORWARD_HEAD", "tilt_forward_motor");
motorOptionToMotorName.delete("TURN_HEAD_MOTOR");
motorOptionToMotorName.set("TURN_HEAD", "TURN_HEAD_MOTOR");

export function move_motor(block: Block, generator: typeof pythonGenerator) {
    // extract block-input
    const motorOption = <string>block.getFieldValue("MOTORNAME");
    const modeInput = block.getFieldValue("MODE");
    const positionInput = String(
        generator.valueToCode(block, "POSITION", Order.ATOMIC),
    );
    const selectedMotorName: string = motorOptionToMotorName.get(motorOption);
    if (selectedMotorName === undefined) {
        throw new Error(
            `'${selectedMotorName}' is not a valid value for 'MOTORNAME'.`,
        );
    }

    // add definitions to generator
    Object.assign(generator.definitions_, {
        IMPORT_RCLPY,
        IMPORT_SYS,
        IMPORT_LOGGING,
        IMPORT_JOINT_TRAJECTORY_MESSAGES,
        IMPORT_APPLY_JOINT_TRAJECTORY,
        CONFIGURE_LOGGING,
        INIT_ROS,
        INIT_APPLY_JOINT_TRASJECTORY_CLIENT,
        INIT_MOTORNAME_TO_POSITION,
    });

    // declare the 'apply_joint_trajectory'-function
    const functionName = generator.provideFunction_(
        "apply_joint_trajectory",
        APPLY_JOINT_TRAJECTORY_FUNCTION(generator),
    );

    // generate code for computing the target postion of the selected motor
    let positionString = "";
    if (modeInput == "ABSOLUTE") {
        positionString = positionInput;
    } else if (modeInput == "RELATIVE") {
        positionString =
            "motor_name_to_position.get('" +
            selectedMotorName +
            "', 0) + " +
            positionInput;
    } else {
        throw new Error(`unexpected input-mode: ${modeInput}.`);
    }
    return `${functionName}("${selectedMotorName}", ${positionString})\n`;
}

export {pythonGenerator};
